# -*- coding: utf-8 -*-
"""predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WdmkwXysS3033CTRkgeu6ITq6uqGhxD0
"""

import re
import nltk
import joblib
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import CountVectorizer

def preprocess_text(text):
    """Preprocess text data"""
    lemmatizer = WordNetLemmatizer()
    all_stopwords = stopwords.words('english')
    all_stopwords.remove('not')

    review = re.sub('[^a-zA-Z]', ' ', text)
    review = review.lower()
    review = review.split()
    review = [lemmatizer.lemmatize(word) for word in review if word not in set(all_stopwords)]
    review = ' '.join(review)

    return review

def load_model(file_path):
    """Load trained model"""
    model = joblib.load(file_path)
    return model

def predict_sentiment(new_review, model, cv):
    """Predict sentiment of new review"""
    preprocessed_review = preprocess_text(new_review)
    transformed_review = cv.transform([preprocessed_review]).toarray()
    prediction = model.predict(transformed_review)
    return prediction

# Load trained model and CountVectorizer
model_path = '/content/sentiment_model'
cv_path = '/content/Countvectorizer.pkl'
classifier = load_model(model_path)
cv = joblib.load(cv_path)

# Example: Predict sentiment of a new review
new_review = "The food was delicious and the service was excellent!"
prediction = predict_sentiment(new_review, classifier, cv)
print("Predicted Sentiment:", prediction)

# Interpret the predicted sentiment
if prediction[0] == 1:
    print("Predicted Sentiment: Positive")
else:
    print("Predicted Sentiment: Negative")

